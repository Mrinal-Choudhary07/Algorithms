/*

Question #1004 :-> Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.
Example 2:

Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

*/

class Solution 
{
    public int longestOnes(int[] A, int K) 
    {
        int c = 0;
        int count = 0,max=Integer.MIN_VALUE , left=0;                
       
            for( int j=0 ; j<A.length ; j++ ) // traverse from 0 -> n-1
            {
                if( A[j] == 1 )count++;     // if 1 count it            
                else if( A[j] == 0 && c != K ) // if 0 and we can flip the zeros(K) count it
                {
                    c++;
                    count++;
                }
                else // if 0 ,BUT we can not flip the zeros(K) take a left pointer start from 0 and traverse it till this position and decrement the count;
                {
                    while( A[left++] != 0 )
                        count--;
                }
                max = Math.max(count,max); // store the maximum value
            }        
        return  max;       
    }
}
