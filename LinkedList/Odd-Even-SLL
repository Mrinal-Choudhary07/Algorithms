   /*
   Given a singly linked list, group all odd nodes together followed by the even nodes. 
   Please note here we are talking about the node number and not the value in the nodes.
   You should try to do it in place. The program should run in O(1) space complexity 
   and O(nodes) time complexity.
   Input: 2->1->3->5->6->4->7->NULL
   Output: 2->3->6->7->1->5->4->NULL*/
   
   // O(n) Space Solution
   public ListNode oddEvenList(ListNode head) {
        
        if( head == null || head.next == null || head.next.next == null )
            return head;
        
        ListNode temp,ptr,ptr2,ptr3,ptr4;
        
        ptr = head;               
        
        ptr2 = new ListNode(0);
        ptr3 = ptr2;
        temp = new ListNode(0);
        ptr4 = temp;
        
        int i=1;
        while( ptr != null )
        {
            if( i%2 != 0 )
            {                
                ptr2.next = ptr;
                ptr2 = ptr2.next;
                ptr = ptr.next;
            }                
            else if( i%2 == 0 )
            {                   
                temp.next = new ListNode(ptr.val);                                
                temp = temp.next;
                ptr = ptr.next;
            }            
            i++;
        }       
        
        ptr2.next = ptr4.next;
        
        return ptr3.next;
    }

// OPTIMIZE SOLUTION O(1) Space Solution

public ListNode oddEvenList(ListNode head) {

    if(head == null)
        return null;
    
   ListNode oddHead = head;
   ListNode evenHead = head.next;
    ListNode odd = head;
    ListNode even = evenHead;
    
    while(odd.next!=null && even.next!=null){
    odd.next = even.next;
    odd = odd.next;
    even.next = odd.next;
    even = even.next;
}

odd.next = evenHead;

return head;
}
